generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  isAdmin       Boolean         @default(false)
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Product {
  id            String     @id @default(cuid())
  articleNumber String     @unique @default(cuid())
  title         String
  description   String
  image         String
  price         Float
  stock         Int        @default(0)
  categories    Category[] @relation("ProductCategories")
}

model Order {
  id        String      @id @default(cuid())
  orderNr   String?
  userId    String
  date      DateTime    @default(now())
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
  address   Address?    @relation(fields: [addressId], references: [id])
  addressId String?
  status    OrderStatus @default(PENDING)
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id       String @id @default(cuid())
  image    String
  title    String
  price    Float
  quantity Int
  orderId  String
  order    Order  @relation(fields: [orderId], references: [id])
}

model Address {
  id      String  @id @default(cuid())
  address String
  zipcode String
  city    String
  phone   String
  Order   Order[]
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[] @relation("ProductCategories")
}